// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video_models/models.proto

package video_models

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Edge with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Edge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Edge with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EdgeMultiError, or nil if none found.
func (m *Edge) ValidateAll() error {
	return m.validate(true)
}

func (m *Edge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := EdgeValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLatencyUrl()) < 1 {
		err := EdgeValidationError{
			field:  "LatencyUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EdgeMultiError(errors)
	}

	return nil
}

// EdgeMultiError is an error wrapping multiple validation errors returned by
// Edge.ValidateAll() if the designated constraints aren't met.
type EdgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EdgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EdgeMultiError) AllErrors() []error { return m }

// EdgeValidationError is the validation error returned by Edge.Validate if the
// designated constraints aren't met.
type EdgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EdgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EdgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EdgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EdgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EdgeValidationError) ErrorName() string { return "EdgeValidationError" }

// Error satisfies the builtin error interface
func (e EdgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEdge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EdgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EdgeValidationError{}

// Validate checks the field values on EdgeServer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EdgeServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EdgeServer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EdgeServerMultiError, or
// nil if none found.
func (m *EdgeServer) ValidateAll() error {
	return m.validate(true)
}

func (m *EdgeServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return EdgeServerMultiError(errors)
	}

	return nil
}

// EdgeServerMultiError is an error wrapping multiple validation errors
// returned by EdgeServer.ValidateAll() if the designated constraints aren't met.
type EdgeServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EdgeServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EdgeServerMultiError) AllErrors() []error { return m }

// EdgeServerValidationError is the validation error returned by
// EdgeServer.Validate if the designated constraints aren't met.
type EdgeServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EdgeServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EdgeServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EdgeServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EdgeServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EdgeServerValidationError) ErrorName() string { return "EdgeServerValidationError" }

// Error satisfies the builtin error interface
func (e EdgeServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEdgeServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EdgeServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EdgeServerValidationError{}

// Validate checks the field values on Latency with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Latency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Latency with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LatencyMultiError, or nil if none found.
func (m *Latency) ValidateAll() error {
	return m.validate(true)
}

func (m *Latency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LatencyMultiError(errors)
	}

	return nil
}

// LatencyMultiError is an error wrapping multiple validation errors returned
// by Latency.ValidateAll() if the designated constraints aren't met.
type LatencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LatencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LatencyMultiError) AllErrors() []error { return m }

// LatencyValidationError is the validation error returned by Latency.Validate
// if the designated constraints aren't met.
type LatencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatencyValidationError) ErrorName() string { return "LatencyValidationError" }

// Error satisfies the builtin error interface
func (e LatencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatencyValidationError{}

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on File with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FileMultiError, or nil if none found.
func (m *File) ValidateAll() error {
	return m.validate(true)
}

func (m *File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Composite

	// no validation rules for UserId

	// no validation rules for Url

	if len(errors) > 0 {
		return FileMultiError(errors)
	}

	return nil
}

// FileMultiError is an error wrapping multiple validation errors returned by
// File.ValidateAll() if the designated constraints aren't met.
type FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMultiError) AllErrors() []error { return m }

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on RecordBroadcast with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordBroadcast) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordBroadcast with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordBroadcastMultiError, or nil if none found.
func (m *RecordBroadcast) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordBroadcast) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Composite

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecordBroadcastValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecordBroadcastValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecordBroadcastValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RecordBroadcastMultiError(errors)
	}

	return nil
}

// RecordBroadcastMultiError is an error wrapping multiple validation errors
// returned by RecordBroadcast.ValidateAll() if the designated constraints
// aren't met.
type RecordBroadcastMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordBroadcastMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordBroadcastMultiError) AllErrors() []error { return m }

// RecordBroadcastValidationError is the validation error returned by
// RecordBroadcast.Validate if the designated constraints aren't met.
type RecordBroadcastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordBroadcastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordBroadcastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordBroadcastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordBroadcastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordBroadcastValidationError) ErrorName() string { return "RecordBroadcastValidationError" }

// Error satisfies the builtin error interface
func (e RecordBroadcastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordBroadcast.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordBroadcastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordBroadcastValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UserValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for ProfileImageUrl

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRequestMultiError, or
// nil if none found.
func (m *UserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UserRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserRequestValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for ProfileImageUrl

	if len(errors) > 0 {
		return UserRequestMultiError(errors)
	}

	return nil
}

// UserRequestMultiError is an error wrapping multiple validation errors
// returned by UserRequest.ValidateAll() if the designated constraints aren't met.
type UserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRequestMultiError) AllErrors() []error { return m }

// UserRequestValidationError is the validation error returned by
// UserRequest.Validate if the designated constraints aren't met.
type UserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRequestValidationError) ErrorName() string { return "UserRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRequestValidationError{}

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeviceMultiError, or nil if none found.
func (m *Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Id

	// no validation rules for Disabled

	// no validation rules for DisabledReason

	// no validation rules for PushProviderName

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return DeviceMultiError(errors)
	}

	return nil
}

// DeviceMultiError is an error wrapping multiple validation errors returned by
// Device.ValidateAll() if the designated constraints aren't met.
type DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceMultiError) AllErrors() []error { return m }

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}

// Validate checks the field values on DeviceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceRequestMultiError, or
// nil if none found.
func (m *DeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Id

	// no validation rules for Disabled

	// no validation rules for DisabledReason

	// no validation rules for PushProviderName

	if len(errors) > 0 {
		return DeviceRequestMultiError(errors)
	}

	return nil
}

// DeviceRequestMultiError is an error wrapping multiple validation errors
// returned by DeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type DeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceRequestMultiError) AllErrors() []error { return m }

// DeviceRequestValidationError is the validation error returned by
// DeviceRequest.Validate if the designated constraints aren't met.
type DeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceRequestValidationError) ErrorName() string { return "DeviceRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceRequestValidationError{}

// Validate checks the field values on RecordingStorageOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordingStorageOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordingStorageOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordingStorageOptionsMultiError, or nil if none found.
func (m *RecordingStorageOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordingStorageOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Storage

	// no validation rules for AccessKey

	// no validation rules for SecretKey

	// no validation rules for BucketName

	// no validation rules for Region

	// no validation rules for Path

	if len(errors) > 0 {
		return RecordingStorageOptionsMultiError(errors)
	}

	return nil
}

// RecordingStorageOptionsMultiError is an error wrapping multiple validation
// errors returned by RecordingStorageOptions.ValidateAll() if the designated
// constraints aren't met.
type RecordingStorageOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordingStorageOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordingStorageOptionsMultiError) AllErrors() []error { return m }

// RecordingStorageOptionsValidationError is the validation error returned by
// RecordingStorageOptions.Validate if the designated constraints aren't met.
type RecordingStorageOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordingStorageOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordingStorageOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordingStorageOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordingStorageOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordingStorageOptionsValidationError) ErrorName() string {
	return "RecordingStorageOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e RecordingStorageOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordingStorageOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordingStorageOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordingStorageOptionsValidationError{}

// Validate checks the field values on RTMPOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RTMPOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RTMPOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RTMPOptionsMultiError, or
// nil if none found.
func (m *RTMPOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *RTMPOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RTMPOptionsMultiError(errors)
	}

	return nil
}

// RTMPOptionsMultiError is an error wrapping multiple validation errors
// returned by RTMPOptions.ValidateAll() if the designated constraints aren't met.
type RTMPOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RTMPOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RTMPOptionsMultiError) AllErrors() []error { return m }

// RTMPOptionsValidationError is the validation error returned by
// RTMPOptions.Validate if the designated constraints aren't met.
type RTMPOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RTMPOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RTMPOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RTMPOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RTMPOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RTMPOptionsValidationError) ErrorName() string { return "RTMPOptionsValidationError" }

// Error satisfies the builtin error interface
func (e RTMPOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRTMPOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RTMPOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RTMPOptionsValidationError{}

// Validate checks the field values on Broadcast with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Broadcast) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Broadcast with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BroadcastMultiError, or nil
// if none found.
func (m *Broadcast) ValidateAll() error {
	return m.validate(true)
}

func (m *Broadcast) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRtmp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BroadcastValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BroadcastValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRtmp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BroadcastValidationError{
				field:  "Rtmp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HlsUrl

	if len(errors) > 0 {
		return BroadcastMultiError(errors)
	}

	return nil
}

// BroadcastMultiError is an error wrapping multiple validation errors returned
// by Broadcast.ValidateAll() if the designated constraints aren't met.
type BroadcastMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BroadcastMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BroadcastMultiError) AllErrors() []error { return m }

// BroadcastValidationError is the validation error returned by
// Broadcast.Validate if the designated constraints aren't met.
type BroadcastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BroadcastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BroadcastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BroadcastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BroadcastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BroadcastValidationError) ErrorName() string { return "BroadcastValidationError" }

// Error satisfies the builtin error interface
func (e BroadcastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroadcast.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BroadcastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BroadcastValidationError{}

// Validate checks the field values on TranscribeOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TranscribeOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranscribeOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TranscribeOptionsMultiError, or nil if none found.
func (m *TranscribeOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *TranscribeOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TranscribeOptionsMultiError(errors)
	}

	return nil
}

// TranscribeOptionsMultiError is an error wrapping multiple validation errors
// returned by TranscribeOptions.ValidateAll() if the designated constraints
// aren't met.
type TranscribeOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranscribeOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranscribeOptionsMultiError) AllErrors() []error { return m }

// TranscribeOptionsValidationError is the validation error returned by
// TranscribeOptions.Validate if the designated constraints aren't met.
type TranscribeOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscribeOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscribeOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscribeOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscribeOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscribeOptionsValidationError) ErrorName() string {
	return "TranscribeOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e TranscribeOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscribeOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscribeOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscribeOptionsValidationError{}

// Validate checks the field values on CallType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallTypeMultiError, or nil
// if none found.
func (m *CallType) ValidateAll() error {
	return m.validate(true)
}

func (m *CallType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetSecurity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallTypeValidationError{
				field:  "Security",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Recording

	// no validation rules for HlsBroadcast

	// no validation rules for Transcribe

	if all {
		switch v := interface{}(m.GetTranscribeOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "TranscribeOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "TranscribeOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTranscribeOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallTypeValidationError{
				field:  "TranscribeOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CallTypeMultiError(errors)
	}

	return nil
}

// CallTypeMultiError is an error wrapping multiple validation errors returned
// by CallType.ValidateAll() if the designated constraints aren't met.
type CallTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallTypeMultiError) AllErrors() []error { return m }

// CallTypeValidationError is the validation error returned by
// CallType.Validate if the designated constraints aren't met.
type CallTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallTypeValidationError) ErrorName() string { return "CallTypeValidationError" }

// Error satisfies the builtin error interface
func (e CallTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallTypeValidationError{}

// Validate checks the field values on Security with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Security) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Security with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecurityMultiError, or nil
// if none found.
func (m *Security) ValidateAll() error {
	return m.validate(true)
}

func (m *Security) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HideProfilePictures

	// no validation rules for ShareScreen

	// no validation rules for RenameUser

	// no validation rules for Unmute

	// no validation rules for StartVideo

	// no validation rules for ScreenShare

	// no validation rules for Record

	// no validation rules for Broadcast

	if len(errors) > 0 {
		return SecurityMultiError(errors)
	}

	return nil
}

// SecurityMultiError is an error wrapping multiple validation errors returned
// by Security.ValidateAll() if the designated constraints aren't met.
type SecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityMultiError) AllErrors() []error { return m }

// SecurityValidationError is the validation error returned by
// Security.Validate if the designated constraints aren't met.
type SecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityValidationError) ErrorName() string { return "SecurityValidationError" }

// Error satisfies the builtin error interface
func (e SecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityValidationError{}

// Validate checks the field values on Participant with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Participant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Participant with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParticipantMultiError, or
// nil if none found.
func (m *Participant) ValidateAll() error {
	return m.validate(true)
}

func (m *Participant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Role

	// no validation rules for Online

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Video

	// no validation rules for Audio

	if utf8.RuneCountInString(m.GetCreatedAt()) < 1 {
		err := ParticipantValidationError{
			field:  "CreatedAt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUpdatedAt()) < 1 {
		err := ParticipantValidationError{
			field:  "UpdatedAt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ParticipantMultiError(errors)
	}

	return nil
}

// ParticipantMultiError is an error wrapping multiple validation errors
// returned by Participant.ValidateAll() if the designated constraints aren't met.
type ParticipantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantMultiError) AllErrors() []error { return m }

// ParticipantValidationError is the validation error returned by
// Participant.Validate if the designated constraints aren't met.
type ParticipantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantValidationError) ErrorName() string { return "ParticipantValidationError" }

// Error satisfies the builtin error interface
func (e ParticipantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantValidationError{}

// Validate checks the field values on ParticipantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParticipantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantRequestMultiError, or nil if none found.
func (m *ParticipantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantRequestValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCreatedAt()) < 1 {
		err := ParticipantRequestValidationError{
			field:  "CreatedAt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUpdatedAt()) < 1 {
		err := ParticipantRequestValidationError{
			field:  "UpdatedAt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ParticipantRequestMultiError(errors)
	}

	return nil
}

// ParticipantRequestMultiError is an error wrapping multiple validation errors
// returned by ParticipantRequest.ValidateAll() if the designated constraints
// aren't met.
type ParticipantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantRequestMultiError) AllErrors() []error { return m }

// ParticipantRequestValidationError is the validation error returned by
// ParticipantRequest.Validate if the designated constraints aren't met.
type ParticipantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantRequestValidationError) ErrorName() string {
	return "ParticipantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantRequestValidationError{}

// Validate checks the field values on CallState with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallState with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallStateMultiError, or nil
// if none found.
func (m *CallState) ValidateAll() error {
	return m.validate(true)
}

func (m *CallState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParticipants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CallStateValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CallStateValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallStateValidationError{
					field:  fmt.Sprintf("Participants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CallStateMultiError(errors)
	}

	return nil
}

// CallStateMultiError is an error wrapping multiple validation errors returned
// by CallState.ValidateAll() if the designated constraints aren't met.
type CallStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallStateMultiError) AllErrors() []error { return m }

// CallStateValidationError is the validation error returned by
// CallState.Validate if the designated constraints aren't met.
type CallStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallStateValidationError) ErrorName() string { return "CallStateValidationError" }

// Error satisfies the builtin error interface
func (e CallStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallStateValidationError{}

// Validate checks the field values on Call with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Call) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Call with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CallMultiError, or nil if none found.
func (m *Call) ValidateAll() error {
	return m.validate(true)
}

func (m *Call) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CallValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CallValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreatedByUserId()) < 1 {
		err := CallValidationError{
			field:  "CreatedByUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCreatedAt()) < 1 {
		err := CallValidationError{
			field:  "CreatedAt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUpdatedAt()) < 1 {
		err := CallValidationError{
			field:  "UpdatedAt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Recording

	if all {
		switch v := interface{}(m.GetBroadcast()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBroadcast()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallValidationError{
				field:  "Broadcast",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Transcribe

	if all {
		switch v := interface{}(m.GetTranscribeOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "TranscribeOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "TranscribeOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTranscribeOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallValidationError{
				field:  "TranscribeOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallMultiError(errors)
	}

	return nil
}

// CallMultiError is an error wrapping multiple validation errors returned by
// Call.ValidateAll() if the designated constraints aren't met.
type CallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallMultiError) AllErrors() []error { return m }

// CallValidationError is the validation error returned by Call.Validate if the
// designated constraints aren't met.
type CallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallValidationError) ErrorName() string { return "CallValidationError" }

// Error satisfies the builtin error interface
func (e CallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallValidationError{}

// Validate checks the field values on EdgeServer_Coordinates with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EdgeServer_Coordinates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EdgeServer_Coordinates with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EdgeServer_CoordinatesMultiError, or nil if none found.
func (m *EdgeServer_Coordinates) ValidateAll() error {
	return m.validate(true)
}

func (m *EdgeServer_Coordinates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lat

	// no validation rules for Long

	if len(errors) > 0 {
		return EdgeServer_CoordinatesMultiError(errors)
	}

	return nil
}

// EdgeServer_CoordinatesMultiError is an error wrapping multiple validation
// errors returned by EdgeServer_Coordinates.ValidateAll() if the designated
// constraints aren't met.
type EdgeServer_CoordinatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EdgeServer_CoordinatesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EdgeServer_CoordinatesMultiError) AllErrors() []error { return m }

// EdgeServer_CoordinatesValidationError is the validation error returned by
// EdgeServer_Coordinates.Validate if the designated constraints aren't met.
type EdgeServer_CoordinatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EdgeServer_CoordinatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EdgeServer_CoordinatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EdgeServer_CoordinatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EdgeServer_CoordinatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EdgeServer_CoordinatesValidationError) ErrorName() string {
	return "EdgeServer_CoordinatesValidationError"
}

// Error satisfies the builtin error interface
func (e EdgeServer_CoordinatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEdgeServer_Coordinates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EdgeServer_CoordinatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EdgeServer_CoordinatesValidationError{}
